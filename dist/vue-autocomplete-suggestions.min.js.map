{"version":3,"file":"vue-autocomplete-suggestions.min.js","sources":["../src/Autocomplete.vue"],"sourcesContent":["<template>\n  <section>\n    <!-- some explanations for the input:\n    1. ':value=\"value\"': Use the received as props\n        for the input element\n\n    2. 'v-bind=\"$attrs\"': Bind attributes like placeholder\n        to the input element instead of the section element\n        (which would be the default)\n\n    3. 'v-on=\"listeners\"': We modify the input listener and\n        emit the input event when someone types something\n        into the input instead of the section element\n        (which would be the default). This allows us to do\n        things like: <vue-autocomplete @input=\"someFunction\">\n    -->\n    <input type=\"text\" :value=\"value\" v-bind=\"$attrs\" v-on=\"listeners\">\n\n    <ul class=\"vue-autocomplete-suggestions\">\n      <template v-for=\"suggestion in suggestions\">\n        <li :key=\"getLabel(suggestion)\" @click=\"selectSuggestion(suggestion)\">\n          <!-- some explanations for the slot:\n          4. 'slot name=\"suggestionComponent\"': the suggestion component\n            provided by the user will be rendered, e.g.\n            <vue-autocomplete>\n              <my-component slot=\"suggestionComponent\">\n                I am text inside the suggestion component\n              </my-component>\n            </vue-autocomplete>\n\n          5. 'v-bind=\"suggestion\"': pass the suggestion as a prop\n              to the component provided by the user so that the user\n              can access it with slot-scope, e.g.\n              <vue-autocomplete :suggestions=\"['a','b','c']\">\n                <my-component slot=\"suggestionComponent\" slot-scope=\"myProp\">\n                  {{myProp}} (myProp will be the suggestion: 'a','b' or 'c')\n                </my-component>\n              </vue-autocomplete>\n          -->\n          <slot name=\"suggestionComponent\" v-bind=\"suggestion\">\n            <!-- use the suggestion as a fallback when\n                 there is no component provided by the user\n            -->\n            {{suggestion}}\n          </slot>\n        </li>\n      </template>\n    </ul>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: 'vue-autocomplete',\n  inheritAttrs: false, // bind attributes to the input tag (see 1.)\n  props: {\n    value: {\n      type: String,\n      required: true,\n    },\n    suggestions: {\n      type: Array,\n      required: true,\n    },\n    /**\n      this function returns the value that will be the value\n      of the input element when the suggestionComponent is clicked.\n      because it is unique, its return value is also used as a key\n      for the suggestion (see <li :key=\"getLabel(suggestion)\">)\n    */\n    getLabel: {\n      type: Function,\n      default: suggestion => JSON.stringify(suggestion),\n    },\n  },\n  computed: {\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: event => this.$emit('input', event.target.value),\n      }\n    },\n  },\n  methods: {\n    selectSuggestion(suggestion) {\n      const value = this.getLabel(suggestion)\n      this.$emit('input', value)\n    },\n  },\n}\n</script>\n\n<style>\n/* make suggestions appear under the input (absolute positioned)\n   and remove spacing */\n\nul.vue-autocomplete-suggestions {\n  position: absolute;\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nul.vue-autocomplete-suggestions li {\n  list-style: none;\n}\n</style>\n"],"names":["String","Array","Function","JSON","stringify","suggestion","this","$listeners","_this","$emit","event","target","value","getLabel"],"mappings":";;;;;;;upBAqDQ,iCACQ,qBAGJA,iBACI,qBAGJC,gBACI,kBASJC,iBACG,mBAAcC,KAAKC,UAAUC,wEAMjCC,KAAKC,kBACD,mBAASC,EAAKC,MAAM,QAASC,EAAMC,OAAOC,+CAKpCP,OACTO,EAAQN,KAAKO,SAASR,QACvBI,MAAM,QAASG"}