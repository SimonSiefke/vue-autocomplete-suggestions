{"version":3,"file":"vue-autocomplete-suggestions.min.js","sources":["../src/Autocomplete.vue"],"sourcesContent":["<template>\n  <section\n    v-click-outside=\"hideSuggestions\"\n    class=\"vue-autocomplete__wrapper\">\n    <div>\n      <!-- some explanations for the input:\n      1. 'v-bind=\"$attrs\"': Bind attributes like placeholder\n          to the input element instead of the section element\n          (which would be the default)\n\n      2. ':value=\"value\"': Use the value received as props\n          for the input element\n\n      3. 'v-on=\"listeners\"': We modify the input listener and\n          emit the input event when someone types something\n          into the input instead of the section element\n          (which would be the default). This allows us to do\n          things like: <vue-autocomplete @input=\"someFunction\">\n      -->\n      <input\n        ref=\"input\"\n        v-bind=\"$attrs\"\n        :value=\"value\"\n        type=\"text\"\n        v-on=\"listeners\"\n        @focus=\"showSuggestions=true\"\n        @keydown.up=\"decrementSelectedIndex\"\n        @keydown.down=\"incrementSelectedIndex\">\n\n      <!-- Image by Font Awesome (http://fontawesome.io), License: CC BY 4.0 -->\n      <img\n        v-show=\"value!==''\"\n        ref=\"resetSearch\"\n        src=\"./resetSearchIcon.svg\"\n        alt=\"reset search\"\n        @click=\"resetSearch\">\n    </div>\n\n    <ul\n      v-show=\"showSuggestions\"\n      ref=\"suggestions\"\n      :style=\"{'max-height': `${maxHeight}px`}\"\n      class=\"vue-autocomplete__suggestions\">\n      <template v-if=\"suggestions.length>0\">\n        <li\n          v-for=\"(suggestion, index) in suggestions\"\n          :key=\"getSuggestionText(suggestion)\"\n          @click=\"selectSuggestion(suggestion)\"\n          @mouseover=\"selectedIndex=index\"\n          @mouseleave=\"selectedIndex=-1\">\n          <component\n            :is=\"suggestionComponent\"\n            :suggestion=\"suggestion\"\n            :active=\"index===selectedIndex\" />\n        </li>\n      </template>\n      <template v-else>\n        <li>\n          <slot name=\"noSuggestionFoundComponent\">no suggestion found</slot>\n        </li>\n      </template>\n    </ul>\n  </section>\n</template>\n\n<script lang=\"ts\">\nimport Vue, { VNode } from 'vue'\n\ninterface Data {\n  selectedIndex: number\n  showSuggestions: boolean\n}\n\ntype Suggestion = any\n\nexport default Vue.extend({\n  name: 'VueAutocomplete',\n  directives: {\n    /** detect a click outside of the input and the suggestions\n     to hide the suggestions */\n    clickOutside: {\n      isFn: true,\n      bind(element: any, binding: any, vnode: VNode) {\n        element.event = (event: Event) => {\n          const { input, resetSearch, suggestions } = vnode.context!.$refs\n\n          // check if the click was outside the components\n          if (\n            input !== event.target &&\n            resetSearch !== event.target &&\n            suggestions !== event.target\n          ) {\n            // if it was, call method provided in attribute value\n            // @ts-ignore\n            vnode.context[binding.expression](event)\n          }\n        }\n        document.body.addEventListener('click', element.event)\n      },\n      unbind(element: any) {\n        document.body.removeEventListener('click', element.event)\n      },\n    },\n  },\n  inheritAttrs: false, // bind attributes to the input tag (see 2.)\n  props: {\n    maxHeight: {\n      type: Number,\n      default: 300,\n    },\n    value: {\n      type: String,\n      required: true,\n    },\n    suggestions: {\n      type: Array,\n      required: true,\n    },\n    suggestionComponent: {\n      required: true,\n      type: Object,\n    },\n    /**\n      this function returns the value that will be the value\n      of the input element when the suggestionComponent is clicked.\n      because it is unique, its return value is also used as a key\n      for the suggestion (see <li :key=\"getSuggestionText(suggestion)\">)\n    */\n    getSuggestionText: {\n      type: Function,\n      default(suggestion: Suggestion) {\n        return JSON.stringify(suggestion)\n      },\n    },\n  },\n  data() {\n    return {\n      selectedIndex: -1,\n      showSuggestions: true,\n    }\n  },\n  computed: {\n    listeners(): any {\n      return {\n        ...this.$listeners,\n        input: (event: any) => this.$emit('input', event.target.value),\n      }\n    },\n  },\n  methods: {\n    hideSuggestions() {\n      this.showSuggestions = false\n      this.selectedIndex = -1\n    },\n    selectSuggestion(suggestion: Suggestion) {\n      this.hideSuggestions()\n      // @ts-ignore (see https://github.com/vuejs/vue/pull/6856)\n      const value = this.getSuggestionText(suggestion)\n      this.$emit('input', value)\n    },\n    incrementSelectedIndex() {\n      this.selectedIndex = Math.min(\n        this.selectedIndex + 1,\n        // @ts-ignore (see https://github.com/vuejs/vue/pull/6856)\n        this.suggestions.length\n      )\n    },\n    decrementSelectedIndex() {\n      this.selectedIndex = Math.max(this.selectedIndex - 1, -1)\n    },\n    resetSearch() {\n      this.$emit('input', '')\n      const inputElement = this.$refs.input as HTMLInputElement\n      inputElement.focus()\n    },\n  },\n})\n</script>\n\n<style>\nhtml,\nbody {\n  height: 100%;\n}\n.vue-autocomplete__wrapper {\n  position: relative;\n}\n\n.vue-autocomplete__wrapper > div img {\n  position: absolute;\n  height: 0.85rem;\n  width: 0.85rem;\n  right: 0.5rem;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  padding: 0.2rem;\n}\n\n.vue-autocomplete__wrapper input {\n  max-width: 100%;\n  box-sizing: border-box;\n}\n\nul.vue-autocomplete__suggestions {\n  position: absolute;\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  width: 100%;\n  overflow-y: auto;\n}\n\nul.vue-autocomplete__suggestions > li {\n  list-style: none;\n  cursor: pointer;\n  width: 100%;\n  user-select: none;\n}\n</style>\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","Vue","extend","element","binding","vnode","event","_a","context","$refs","input","resetSearch","suggestions","target","expression","body","addEventListener","removeEventListener","Number","String","Array","Function","suggestion","JSON","stringify","_this","this","$listeners","$emit","value","showSuggestions","selectedIndex","hideSuggestions","getSuggestionText","Math","min","max","focus"],"mappings":"+QA2NA,IAAIA,EAAsCC,OAAOC,QAAU,SAASC,OAC3D,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,QAEvC,IAAII,OADLF,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KACzDN,EAAEM,GAAKL,EAAEK,WAEVN,UAGIU,EAAIC,8/CACT,kDAKQ,OACA,SAAUC,EAASC,EAASC,KACtBC,MAAQ,SAAUA,OAClBC,EAAKF,EAAMG,QAAQC,MAAOC,EAAQH,EAAGG,MAAOC,EAAcJ,EAAGI,YAAaC,EAAcL,EAAGK,YAE3FF,IAAUJ,EAAMO,QAChBF,IAAgBL,EAAMO,QACtBD,IAAgBN,EAAMO,UAGhBL,QAAQJ,EAAQU,YAAYR,aAGjCS,KAAKC,iBAAiB,QAASb,EAAQG,eAE5C,SAAUH,YACLY,KAAKE,oBAAoB,QAASd,EAAQG,wBAIjD,yBAGAY,eACK,iBAGLC,iBACI,qBAGJC,gBACI,kCAGA,OACJ/B,gCASAgC,iBACK,SAAUC,UACVC,KAAKC,UAAUF,WAI5B,iCAEkB,mBACC,wBAIV,eACHG,EAAQC,YACLtC,KAAasC,KAAKC,kBAAqB,SAAUrB,UAAgBmB,EAAMG,MAAM,QAAStB,EAAMO,OAAOgB,qCAI7F,gBACRC,iBAAkB,OAClBC,eAAiB,oBAER,SAAUT,QACnBU,sBAEDH,EAAQH,KAAKO,kBAAkBX,QAC9BM,MAAM,QAASC,2BAEA,gBACfE,cAAgBG,KAAKC,IAAIT,KAAKK,cAAgB,OAE9CnB,YAAYhB,gCAEG,gBACfmC,cAAgBG,KAAKE,IAAIV,KAAKK,cAAgB,GAAI,gBAE9C,gBACJH,MAAM,QAAS,IACDF,KAAKjB,MAAMC,MACjB2B"}