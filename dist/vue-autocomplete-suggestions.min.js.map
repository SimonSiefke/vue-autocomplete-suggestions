{"version":3,"file":"vue-autocomplete-suggestions.min.js","sources":["../src/Autocomplete.vue"],"sourcesContent":["<template>\n  <section v-click-outside=\"hideSuggestions\">\n    <!-- some explanations for the input:\n    1. ':value=\"value\"': Use the received as props\n        for the input element\n\n    2. 'v-bind=\"$attrs\"': Bind attributes like placeholder\n        to the input element instead of the section element\n        (which would be the default)\n\n    3. 'v-on=\"listeners\"': We modify the input listener and\n        emit the input event when someone types something\n        into the input instead of the section element\n        (which would be the default). This allows us to do\n        things like: <vue-autocomplete @input=\"someFunction\">\n    -->\n    <input type=\"text\" :value=\"value\" v-bind=\"$attrs\" v-on=\"listeners\" ref=\"input\" @focus=\"showSuggestions=true\" @keydown.up=\"decrementSelectedIndex\" @keydown.down=\"incrementSelectedIndex\">\n\n    <ul class=\"vue-autocomplete-suggestions\" v-show=\"showSuggestions\">\n      <template v-if=\"suggestions.length>0\">\n        <li v-for=\"(suggestion, index) in suggestions\" :key=\"getSuggestionText(suggestion)\" @click.stop=\"selectSuggestion(suggestion)\" @mouseover=\"selectedIndex=index\" @mouseleave=\"selectedIndex=-1\">\n          <component :is=\"suggestionComponent\" :suggestion=\"suggestion\" :active=\"index===selectedIndex\"></component>\n        </li>\n      </template>\n\n      <template v-else>\n        <li>\n          <slot name=\"noSuggestionFoundComponent\">no suggestion found</slot>\n        </li>\n      </template>\n    </ul>\n  </section>\n</template>\n\n<script lang=\"ts\">\nimport Vue, { VNode } from 'vue'\n\ninterface Data {\n  selectedIndex: number\n  showSuggestions: boolean\n}\n\ntype Suggestion = any\n\nexport default Vue.extend({\n  name: 'vue-autocomplete',\n  inheritAttrs: false, // bind attributes to the input tag (see 2.)\n  props: {\n    value: {\n      type: String,\n      required: true,\n    },\n    suggestions: {\n      type: Array,\n      required: true,\n    },\n    suggestionComponent: {\n      required: true,\n    },\n    /**\n      this function returns the value that will be the value\n      of the input element when the suggestionComponent is clicked.\n      because it is unique, its return value is also used as a key\n      for the suggestion (see <li :key=\"getSuggestionText(suggestion)\">)\n    */\n    getSuggestionText: {\n      type: Function,\n      default(suggestion: Suggestion) {\n        return JSON.stringify(suggestion)\n      },\n    },\n  },\n  directives: {\n    clickOutside: {\n      bind(element: any, binding: any, vnode: VNode) {\n        element.event = (event: any) => {\n          // check if the click was outside the element and its childrens\n          if (element !== event.target && !element.contains(event.target)) {\n            // if it was, call method provided in attribute value\n            // @ts-ignore\n            vnode.context[binding.expression](event)\n          }\n        }\n        document.body.addEventListener('click', element.event)\n      },\n      unbind(element: any) {\n        document.body.removeEventListener('click', element.event)\n      },\n    },\n  },\n  data() {\n    return {\n      selectedIndex: -1,\n      showSuggestions: true,\n    }\n  },\n  computed: {\n    listeners(): any {\n      return {\n        ...this.$listeners,\n        input: (event: any) => this.$emit('input', event.target.value),\n      }\n    },\n  },\n  methods: {\n    hideSuggestions() {\n      this.showSuggestions = false\n      this.selectedIndex = -1\n    },\n    selectSuggestion(suggestion: Suggestion) {\n      this.hideSuggestions()\n      // @ts-ignore (see https://github.com/vuejs/vue/pull/6856)\n      const value = this.getSuggestionText(suggestion)\n      this.$emit('input', value)\n    },\n    incrementSelectedIndex() {\n      this.selectedIndex = Math.min(\n        this.selectedIndex + 1,\n        // @ts-ignore (see https://github.com/vuejs/vue/pull/6856)\n        this.suggestions.length\n      )\n    },\n    decrementSelectedIndex() {\n      this.selectedIndex = Math.max(this.selectedIndex - 1, -1)\n    },\n  },\n})\n</script>\n\n<style>\nhtml,\nbody {\n  height: 100%;\n}\n\nul.vue-autocomplete-suggestions {\n  position: absolute;\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nul.vue-autocomplete-suggestions li {\n  list-style: none;\n  cursor: pointer;\n}\n</style>\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","Vue","extend","String","Array","Function","suggestion","JSON","stringify","element","binding","vnode","event","target","contains","context","expression","body","addEventListener","removeEventListener","_this","this","$listeners","$emit","value","showSuggestions","selectedIndex","hideSuggestions","getSuggestionText","Math","min","suggestions","max"],"mappings":"+QAkJA,IAAIA,EAAsCC,OAAOC,QAAU,SAASC,OAC3D,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,QAEvC,IAAII,OADLF,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KACzDN,EAAEM,GAAKL,EAAEK,WAEVN,UAGIU,EAAIC,6sCACT,iCACQ,qBAGAC,iBACI,qBAGJC,gBACI,kCAGA,2BASJC,iBACK,SAAUC,UACVC,KAAKC,UAAUF,qCAMpB,SAAUG,EAASC,EAASC,KACtBC,MAAQ,SAAUA,GAElBH,IAAYG,EAAMC,QAAWJ,EAAQK,SAASF,EAAMC,WAG9CE,QAAQL,EAAQM,YAAYJ,aAGjCK,KAAKC,iBAAiB,QAAST,EAAQG,eAE5C,SAAUH,YACLQ,KAAKE,oBAAoB,QAASV,EAAQG,eAIzD,iCAEkB,mBACC,wBAIV,eACHQ,EAAQC,YACLjC,KAAaiC,KAAKC,kBAAqB,SAAUV,UAAgBQ,EAAMG,MAAM,QAASX,EAAMC,OAAOW,qCAI7F,gBACRC,iBAAkB,OAClBC,eAAiB,oBAER,SAAUpB,QACnBqB,sBAEDH,EAAQH,KAAKO,kBAAkBtB,QAC9BiB,MAAM,QAASC,2BAEA,gBACfE,cAAgBG,KAAKC,IAAIT,KAAKK,cAAgB,OAE9CK,YAAYnC,gCAEG,gBACf8B,cAAgBG,KAAKG,IAAIX,KAAKK,cAAgB,GAAI"}